{
  "info": {
    "name": "Microservices RPC API Collection",
    "description": "Complete API testing collection for User and Order microservices",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "order_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/health",
          "host": ["{{base_url}}"],
          "path": ["health"]
        },
        "description": "Check if all services are running"
      },
      "response": []
    },
    {
      "name": "User Management",
      "item": [
        {
          "name": "Create User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test response status",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test response structure",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "});",
                  "",
                  "// Test success response",
                  "pm.test(\"User created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.user).to.have.property('id');",
                  "    pm.expect(jsonData.user).to.have.property('name');",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "    pm.expect(jsonData.user).to.have.property('created_at');",
                  "});",
                  "",
                  "// Save user ID for other requests",
                  "if (pm.response.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.success && jsonData.user) {",
                  "        pm.collectionVariables.set(\"user_id\", jsonData.user.id);",
                  "        console.log(\"Saved user_id: \" + jsonData.user.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users",
              "host": ["{{base_url}}"],
              "path": ["api", "users"]
            },
            "description": "Create a new user"
          },
          "response": []
        },
        {
          "name": "Create Another User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Jane Smith\",\n  \"email\": \"jane.smith@example.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users",
              "host": ["{{base_url}}"],
              "path": ["api", "users"]
            },
            "description": "Create another user for testing"
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User found successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.user).to.have.property('id');",
                  "    pm.expect(jsonData.user.id).to.equal(pm.collectionVariables.get(\"user_id\"));",
                  "});",
                  "",
                  "pm.test(\"User has required fields\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user).to.have.property('name');",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "    pm.expect(jsonData.user).to.have.property('created_at');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{user_id}}"]
            },
            "description": "Get user by ID (uses saved user_id variable)"
          },
          "response": []
        },
        {
          "name": "Get User by ID - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User not found\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/invalid-user-id",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "invalid-user-id"]
            },
            "description": "Test getting a non-existent user"
          },
          "response": []
        },
        {
          "name": "Get All Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Users list returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData).to.have.property('users');",
                  "    pm.expect(jsonData.users).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Users have required fields\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.users && jsonData.users.length > 0) {",
                  "        jsonData.users.forEach(user => {",
                  "            pm.expect(user).to.have.property('id');",
                  "            pm.expect(user).to.have.property('name');",
                  "            pm.expect(user).to.have.property('email');",
                  "            pm.expect(user).to.have.property('created_at');",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users",
              "host": ["{{base_url}}"],
              "path": ["api", "users"]
            },
            "description": "Get all users"
          },
          "response": []
        },
        {
          "name": "Create User - Validation Error",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Validation error returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('required');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test User\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users",
              "host": ["{{base_url}}"],
              "path": ["api", "users"]
            },
            "description": "Test user creation with missing required fields"
          },
          "response": []
        }
      ],
      "description": "User management endpoints"
    },
    {
      "name": "Order Management",
      "item": [
        {
          "name": "Create Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Order created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.order).to.have.property('id');",
                  "    pm.expect(jsonData.order).to.have.property('user_id');",
                  "    pm.expect(jsonData.order).to.have.property('product_name');",
                  "    pm.expect(jsonData.order).to.have.property('amount');",
                  "    pm.expect(jsonData.order).to.have.property('quantity');",
                  "    pm.expect(jsonData.order).to.have.property('status');",
                  "    pm.expect(jsonData.order).to.have.property('created_at');",
                  "});",
                  "",
                  "// Save order ID for other requests",
                  "if (pm.response.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.success && jsonData.order) {",
                  "        pm.collectionVariables.set(\"order_id\", jsonData.order.id);",
                  "        console.log(\"Saved order_id: \" + jsonData.order.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user_id\": \"{{user_id}}\",\n  \"product_name\": \"MacBook Pro\",\n  \"amount\": 1999.99,\n  \"quantity\": 1\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/orders",
              "host": ["{{base_url}}"],
              "path": ["api", "orders"]
            },
            "description": "Create a new order for the saved user"
          },
          "response": []
        },
        {
          "name": "Create Another Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Order created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user_id\": \"{{user_id}}\",\n  \"product_name\": \"iPhone 15\",\n  \"amount\": 999.99,\n  \"quantity\": 2\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/orders",
              "host": ["{{base_url}}"],
              "path": ["api", "orders"]
            },
            "description": "Create another order for testing"
          },
          "response": []
        },
        {
          "name": "Get Order by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Order found successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.order).to.have.property('id');",
                  "    pm.expect(jsonData.order.id).to.equal(pm.collectionVariables.get(\"order_id\"));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/orders/{{order_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "orders", "{{order_id}}"]
            },
            "description": "Get order by ID (uses saved order_id variable)"
          },
          "response": []
        },
        {
          "name": "Get Order by ID - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Order not found\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/orders/invalid-order-id",
              "host": ["{{base_url}}"],
              "path": ["api", "orders", "invalid-order-id"]
            },
            "description": "Test getting a non-existent order"
          },
          "response": []
        },
        {
          "name": "Get User Orders",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Orders list returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData).to.have.property('orders');",
                  "    pm.expect(jsonData.orders).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Orders belong to correct user\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var userId = pm.collectionVariables.get(\"user_id\");",
                  "    if (jsonData.orders && jsonData.orders.length > 0) {",
                  "        jsonData.orders.forEach(order => {",
                  "            pm.expect(order.user_id).to.equal(userId);",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}/orders",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{user_id}}", "orders"]
            },
            "description": "Get all orders for a specific user"
          },
          "response": []
        },
        {
          "name": "Create Order - Invalid User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User validation error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('User not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user_id\": \"invalid-user-id\",\n  \"product_name\": \"Test Product\",\n  \"amount\": 100.00,\n  \"quantity\": 1\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/orders",
              "host": ["{{base_url}}"],
              "path": ["api", "orders"]
            },
            "description": "Test order creation with invalid user ID"
          },
          "response": []
        },
        {
          "name": "Create Order - Validation Error",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Validation error returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('required');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user_id\": \"{{user_id}}\",\n  \"product_name\": \"Test Product\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/orders",
              "host": ["{{base_url}}"],
              "path": ["api", "orders"]
            },
            "description": "Test order creation with missing required fields"
          },
          "response": []
        }
      ],
      "description": "Order management endpoints"
    },
    {
      "name": "Combined Endpoints",
      "item": [
        {
          "name": "Get User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User profile returned successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "    pm.expect(jsonData.data).to.have.property('orders');",
                  "    pm.expect(jsonData.data).to.have.property('order_count');",
                  "});",
                  "",
                  "pm.test(\"Profile data is complete\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var data = jsonData.data;",
                  "    ",
                  "    // Check user data",
                  "    pm.expect(data.user).to.have.property('id');",
                  "    pm.expect(data.user).to.have.property('name');",
                  "    pm.expect(data.user).to.have.property('email');",
                  "    ",
                  "    // Check orders data",
                  "    pm.expect(data.orders).to.be.an('array');",
                  "    pm.expect(data.order_count).to.be.a('number');",
                  "    pm.expect(data.order_count).to.equal(data.orders.length);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}/profile",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{user_id}}", "profile"]
            },
            "description": "Get user profile with aggregated data from multiple services"
          },
          "response": []
        },
        {
          "name": "Get Profile - User Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"User not found error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('User not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/invalid-user-id/profile",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "invalid-user-id", "profile"]
            },
            "description": "Test profile endpoint with invalid user ID"
          },
          "response": []
        }
      ],
      "description": "Combined endpoints that aggregate data from multiple services"
    }
  ]
}